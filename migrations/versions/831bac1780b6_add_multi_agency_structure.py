"""Add multi-agency structure

Revision ID: 831bac1780b6
Revises: 36914928863c
Create Date: 2025-08-22 22:41:23.232780

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy import String, Integer, DateTime

# revision identifiers, used by Alembic.
revision = '831bac1780b6'
down_revision = '36914928863c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # --- Step 1: Create new tables ---
    op.create_table('agency',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('venue',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('agency_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['agency_id'], ['agency.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'agency_id', name='_name_agency_uc')
    )

    # --- Step 2: Seed initial data required for migration ---
    role_table = table('role', column('name', String))
    agency_table = table('agency', column('name', String))
    
    op.bulk_insert(role_table,
        [
            {'name': 'Super-Admin'},
            {'name': 'Manager'},
            {'name': 'Admin'}
        ]
    )
    
    op.bulk_insert(agency_table,
        [
            {'name': 'Bangkok Agency'}
        ]
    )
    
    conn = op.get_bind()
    res = conn.execute(sa.text("SELECT id FROM agency WHERE name = 'Bangkok Agency'")).scalar_one()
    bangkok_agency_id = res

    venue_table = table('venue', column('name', String), column('agency_id', Integer))
    op.bulk_insert(venue_table,
        [
            {'name': 'RED DRAGON', 'agency_id': bangkok_agency_id},
            {'name': 'MANDARIN', 'agency_id': bangkok_agency_id},
            {'name': 'SHARK', 'agency_id': bangkok_agency_id}
        ]
    )

    # --- Step 3: Alter existing tables with data backfill ---
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('agency_id', sa.Integer(), nullable=True))
    
    op.execute(f"UPDATE \"user\" SET agency_id = {bangkok_agency_id}")
    op.execute("UPDATE \"user\" SET role_id = (SELECT id FROM role WHERE name = 'Admin')")
    op.execute("UPDATE \"user\" SET role_id = (SELECT id FROM role WHERE name = 'Super-Admin') WHERE username = 'WebDev'")


    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('role_id', nullable=False)
        batch_op.create_foreign_key('fk_user_role', 'role', ['role_id'], ['id'])
        batch_op.create_foreign_key('fk_user_agency', 'agency', ['agency_id'], ['id'])
        batch_op.drop_column('role')

    with op.batch_alter_table('staff_profile', schema=None) as batch_op:
        batch_op.add_column(sa.Column('agency_id', sa.Integer(), nullable=True))

    op.execute(f"UPDATE staff_profile SET agency_id = {bangkok_agency_id}")

    with op.batch_alter_table('staff_profile', schema=None) as batch_op:
        batch_op.alter_column('agency_id', nullable=False)
        batch_op.create_unique_constraint('_staff_id_agency_uc', ['staff_id', 'agency_id'])
        batch_op.create_foreign_key('fk_staff_agency', 'agency', ['agency_id'], ['id'])
        batch_op.drop_column('current_venue')
    
    with op.batch_alter_table('assignment', schema=None) as batch_op:
        batch_op.add_column(sa.Column('agency_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('venue_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('contract_role', sa.String(length=50), server_default='Dancer', nullable=False))

    op.execute(f"UPDATE assignment SET agency_id = {bangkok_agency_id}")
    op.execute("UPDATE assignment SET venue_id = (SELECT id FROM venue WHERE name = 'RED DRAGON' LIMIT 1)")

    with op.batch_alter_table('assignment', schema=None) as batch_op:
        batch_op.alter_column('agency_id', nullable=False)
        batch_op.alter_column('venue_id', nullable=False)
        batch_op.create_foreign_key('fk_assignment_venue', 'venue', ['venue_id'], ['id'])
        batch_op.create_foreign_key('fk_assignment_agency', 'agency', ['agency_id'], ['id'])
        batch_op.drop_column('role')
        batch_op.drop_column('venue')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role', sa.VARCHAR(length=80), nullable=False, server_default='Admin'))
        batch_op.drop_constraint('fk_user_role', type_='foreignkey')
        batch_op.drop_constraint('fk_user_agency', type_='foreignkey')
        batch_op.drop_column('agency_id')
        batch_op.drop_column('role_id')

    with op.batch_alter_table('staff_profile', schema=None) as batch_op:
        batch_op.add_column(sa.Column('current_venue', sa.VARCHAR(length=80), nullable=True))
        batch_op.drop_constraint('fk_staff_agency', type_='foreignkey')
        batch_op.drop_constraint('_staff_id_agency_uc', type_='unique')
        batch_op.drop_column('agency_id')

    with op.batch_alter_table('assignment', schema=None) as batch_op:
        batch_op.add_column(sa.Column('venue', sa.VARCHAR(length=80), nullable=False, server_default='Default'))
        batch_op.add_column(sa.Column('role', sa.VARCHAR(length=50), server_default=sa.text("'Dancer'"), nullable=False))
        batch_op.drop_constraint('fk_assignment_venue', type_='foreignkey')
        batch_op.drop_constraint('fk_assignment_agency', type_='foreignkey')
        batch_op.drop_column('contract_role')
        batch_op.drop_column('venue_id')
        batch_op.drop_column('agency_id')

    op.drop_table('venue')
    op.drop_table('role')
    op.drop_table('agency')
    # ### end Alembic commands ###