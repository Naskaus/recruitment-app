OS Agency â€” Master README (v0.9.9.3)
1. Overview / Purpose
OS Agency is a SaaS platform for talent agencies (recruitment, dispatch, payroll, performance). The mission is to transform the current stable version into a robust, scalable, and market-ready SaaS (v1.0).
Core Roles in Workflow
Gemini (Strategist) â€” STRATEGO-IV: Defines vision, anticipates problems, produces sequential action plans.
IDE (Implementer) â€” Cursor: Executes tasks, inspects files, runs tests, produces code.
Sebastien (Boss) â€” Provides context, validates priorities, makes final decisions.
Current Version: v0.9.9.3 (Production Stable)
Immediate Goal: Resume the application bug-fixing sprint and prepare for the UI/UX refactor (Mission 4).
Ultimate Goal (v1.0): A SaaS-ready, fast, secure, and scalable product.

2. Architecture & Tech Stack
ðŸ›  Backend
Language: Python 3.9+
Framework: Flask (Application Factory + Blueprints)
ORM: SQLAlchemy + Flask-Migrate
Services: Payroll (payroll_service.py, 612 lines), Agency Management
PDF generation: WeasyPrint
ðŸŽ¨ Frontend
Templates: Jinja2
CSS: Custom + Tailwind (app/static/css/style.css, 106KB)
JavaScript: Monolithic app.js (1201 lines â†’ refactoring planned)
ðŸ—„ Database
Dev: SQLite
Prod: Heroku PostgreSQL
ðŸš€ Deployment
Web Server: PythonAnywhere
Database: Heroku Postgres
ðŸ“‚ Project Structure (Key Excerpts)
Note on Cleanup: A "Grand Nettoyage" operation was performed. ~1.3 MB of unused/duplicate files (including a root static/ folder and old templates) have been moved to a _quarantine/ directory, pending final deletion. The canonical paths are now within the app/ directory.

3. Features
âœ… Completed
Centralized calculations: payroll_service, ContractCalculations.
RBAC stabilized: WEBDEV, SUPER_ADMIN, ADMIN, MANAGER.
Contract lifecycle management.
Multi-agency support with data isolation.
Major Performance Overhaul: Resolved critical latency on the /payroll page, reducing load times from ~20s to < 2s.

4. Version History & Sprint Notes
v0.9.9 -> v0.9.9.3 (Production Stability Marathon)
Post-Mortem: The initial v0.9.9 deployment failed in production, revealing extreme latency and UI bugs. A marathon debugging session identified a cascade of issues:
Environment Mismatch: The core problem was a misconfigured PythonAnywhere environment (Working Directory, missing .env file, stubborn template cache).
Solution: A "Phoenix Plan" was executed, involving a full deletion and recreation of the web app, a clean clone of the repository, and a meticulous reconfiguration.
Performance Bug: The remaining latency was a business logic issue, loading all contracts by default.
Final Fix: The /payroll route was refactored to default to filtering by status='active', solving the performance bottleneck.
Code Cleanup: A "Grand Nettoyage" sprint was executed, quarantining all identified duplicate and orphaned files.
Bugs Pending (Current Sprint) ðŸŽ¯
#6 Agency deletion button Not showing. Error when Delete.
#7 Agency page translation (FR â†’ EN).
#1 CSS desync (Staff List page). Status: âœ… COMPLETED
#2 Incomplete user list (Admin missing, paused). Status: âœ… COMPLETED
#8 Filtres and results not correct in Payroll (and in PDF as well) : First priority
#9 In staff profile the filters works. But are not taken in the PDF :First priority


5. Critical Missions
ðŸŽ¯ Mission 1 â€” Payroll Latency
Status: âœ… COMPLETED
Resolution: Solved via a strategic change in data loading. The /payroll page now defaults to filtering by status='active', reducing the initial dataset by >90%. Eager loading (joinedload) was also implemented to prevent N+1 queries.
Success: Page loads are now < 2 seconds with the full production dataset.
ðŸŽ¯ Mission 2 â€” app.js Refactor
Status: Pending. To be addressed after the current bug-fixing sprint.
ðŸŽ¯ Mission 3 â€” Automated Testing
Status: Pending. pytest is installed and functional. Test coverage needs to be built.
ðŸŽ¯ Mission 4 â€” UI Refactor
Status: Pending. Next major mission after bug fixes.

6. Deployment & DevOps
ðŸ”§ Environment Variables
.env file is mandatory on the server and must contain the production DATABASE_URL. It is NOT deployed via Git.
ðŸš¨ Critical Deployment Lessons (v0.9.9.x)
Verify PA Web Tab Config: Always validate the 4 key paths: Source code, Working directory, Virtualenv, and WSGI file.
Working Directory is CRITICAL: It must point to the project root (e.g., /home/Naskaus/recruitment-app), otherwise, Flask cannot find templates correctly.
The "Phoenix Plan": In case of persistent "ghost" behavior, the ultimate solution is to delete and recreate the web app from the PythonAnywhere dashboard.
âœ… WSGI Config (PythonAnywhere) - Validated
Python


import os
import sys
from dotenv import load_dotenv

path = '/home/Naskaus/recruitment-app'
if path not in sys.path:
    sys.path.insert(0, path)

dotenv_path = os.path.join(path, '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

from app import create_app
application = create_app()


7. Prompt Archive & Notes
ðŸš€ Strategic Orchestration Prompt (v0.9.8)
Defines roles: Gemini (Strategist), IDE (Implementer), Sebastien (Boss).
Mandates discovery phase, sequential planning, validation loop.
Output format: Markdown with mission, tasks, success criteria.
ðŸ“Œ Add-on Context (v0.9.9)
7 bugs listed with current statuses.
Ongoing mission: export + delete orchestration (Agency management).
ðŸ“œ Deployment Prompt
Role: Senior DevOps co-pilot.
Language: Explanations in French, commands in native language.
Guardrails: step-gating, secrets placeholders, verifications.
Deliverables: Full deployment phases, WSGI config, backup automation, troubleshooting guide.
âœ… Final Notes
This README is both a technical documentation and a prompt scaffold.
It contains everything needed for Gemini â†” IDE orchestration, developer onboarding, debugging, deployment, and the long-term SaaS roadmap.

8. Communication Protocol (Gemini â†” IDE â†” Boss)
At the start of every new chat:
Gemini (Strategist) must query the IDE (Cursor/Windsurf) with basic discovery questions to build an accurate understanding of the app.
Example baseline questions:
Show me the full repo structure (files + sizes).
List dependencies and versions (requirements.txt).
What is the current database state (flask db current)?
Show key configs (.env, config.py, WSGI).
Are there any open bugs, failing tests, or errors in logs?
Only once Gemini has collected everything needed from the IDE â†’ the task phase begins.
Gemini must always maximize IDE usage (read files, run inspections, request logs, test snippets) instead of relying on assumptions.
Sebastien (Boss) acts as intermediary, validating plans and priorities.

9. Ã‰tat Actuel de l'Application (v0.9.9.3)
ðŸ“Š STATUT ARCHITECTURAL
L'application est stable et performante en production. L'architecture modulaire et SaaS-ready est validÃ©e et a survÃ©cu Ã  une sÃ©rie de tests de rÃ©sistance involontaires.
âœ… ProblÃ¨mes RÃ©solus RÃ©cemment
Performance / Latence : CorrigÃ©e (<2s).
StabilitÃ© de DÃ©ploiement : Causes racines des Ã©checs identifiÃ©es et documentÃ©es.
Nettoyage du Code : Fichiers inutiles mis en quarantaine.
ðŸ”„ Prochaines Ã‰tapes RecommandÃ©es
Sprint de Bugs Applicatifs (PrioritÃ© 1)
Corriger les bugs #6, #7, et #1 restants pour finaliser la stabilisation fonctionnelle.
UI/UX Modernisation (PrioritÃ© 2)
Reprendre la migration vers Tailwind CSS et composants rÃ©utilisables.
Refactor app.js (PrioritÃ© 3)
DÃ©composer le monolithe JavaScript.
Automatisation (PrioritÃ© 4)
Mettre en place un pipeline CI/CD et une suite de tests complets.

- Arborescence Principale (Excluant les dossiers non pertinents)
recruitment-app/
â”œâ”€â”€ .git/                          # ContrÃ´le de version
â”œâ”€â”€ app/                           # Application principale
â”‚   â”œâ”€â”€ __init__.py               # Configuration Flask
â”‚   â”œâ”€â”€ models.py                 # ModÃ¨les de donnÃ©es
â”‚   â”œâ”€â”€ decorators.py             # DÃ©corateurs d'authentification
â”‚   â”œâ”€â”€ admin/                    # Routes d'administration
â”‚   â”œâ”€â”€ auth/                     # Authentification et gestion utilisateurs
â”‚   â”œâ”€â”€ dispatch/                 # Gestion des contrats
â”‚   â”œâ”€â”€ main/                     # Routes principales
â”‚   â”œâ”€â”€ payroll/                  # SystÃ¨me de paie
â”‚   â”œâ”€â”€ pilot/                    # FonctionnalitÃ©s pilotes
â”‚   â”œâ”€â”€ services/                 # Services mÃ©tier
â”‚   â”œâ”€â”€ staff/                    # Gestion du personnel
â”‚   â”œâ”€â”€ static/                   # Assets statiques (CSS, JS, images)
â”‚   â””â”€â”€ templates/                # Templates HTML
â”œâ”€â”€ data/                         # Base de donnÃ©es locale
â”œâ”€â”€ logs/                         # Fichiers de log
â”œâ”€â”€ migrations/                   # Migrations de base de donnÃ©es
â”œâ”€â”€ tests/                        # Tests automatisÃ©s
â”œâ”€â”€ uploads/                      # Fichiers uploadÃ©s
â”œâ”€â”€ archive/                      # Archives du projet
â”œâ”€â”€ scripts/                      # Scripts utilitaires
â”œâ”€â”€ config.py                     # Configuration de l'application
â”œâ”€â”€ requirements.txt              # DÃ©pendances Python
â”œâ”€â”€ app.py                        # Point d'entrÃ©e principal
â”œâ”€â”€ run.py                        # Script de dÃ©marrage
â””â”€â”€ .flaskenv                     # Variables d'environnement Flask

ðŸŽ¯ ROADMAP V1.0


La base technique Ã©tant maintenant Ã©prouvÃ©e et robuste, le focus se dÃ©place vers l'amÃ©lioration fonctionnelle et l'expÃ©rience utilisateur pour atteindre la v1.0.
