OS Agency â€” Master README (v0.9.82)
1. Overview / Purpose

OS Agency is a SaaS platform for talent agencies (recruitment, dispatch, payroll, performance).
The mission is to transform the current version (v0.9.82) into a robust, scalable, and market-ready SaaS (v1.0).

Core Roles in Workflow

Gemini 2.5 Pro (Strategist) â€” defines vision, anticipates problems, produces sequential action plans.

IDE (Cursor or Windsurf Cascade, Implementer) â€” executes tasks, inspects files, runs tests, produces code.

Sebastien (Boss) â€” provides context, validates priorities, makes final decisions.

Immediate Goal (v0.9.82): Stabilize locally by fixing all identified bugs before redeployment.

Ultimate Goal (v1.0): A SaaS-ready, fast, secure, and scalable product.

2. Architecture & Tech Stack
ðŸ›  Backend

Language: Python 3.9+

Framework: Flask (Application Factory + Blueprints)

ORM: SQLAlchemy + Flask-Migrate

Auth: Flask-Login

Services: Payroll, Agency Management, Contract Calculations

PDF generation: WeasyPrint

ðŸŽ¨ Frontend

Templates: Jinja2

CSS: Custom + Tailwind (migration in progress)

JavaScript: Monolithic app.js (58 KB, ~1100 lines â†’ refactoring planned)

ðŸ—„ Database

Dev: SQLite

Prod: Heroku PostgreSQL

ðŸš€ Deployment

PythonAnywhere (web server, $12/month)

Heroku Postgres (DB, $5/month)

CI/CD: Manual Git + Alembic migrations

ðŸ“‚ Project Structure (key excerpts)
recruitment-app/
â”œâ”€â”€ app.py (48KB) â€” Main application
â”œâ”€â”€ config.py â€” Configuration
â”œâ”€â”€ requirements.txt â€” Dependencies
â”œâ”€â”€ run.py â€” Entry point
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ admin/routes.py (14KB)
â”‚   â”œâ”€â”€ auth/routes.py (32KB)
â”‚   â”œâ”€â”€ payroll/routes.py (37KB)
â”‚   â”œâ”€â”€ services/payroll_service.py (21KB)
â”‚   â”œâ”€â”€ static/js/app.js (58KB)
â”‚   â”œâ”€â”€ static/css/style.css (106KB)
â”‚   â”œâ”€â”€ templates/payroll.html (21KB)
â”‚   â””â”€â”€ models.py (12KB)
â”œâ”€â”€ data/recruitment-dev.db â€” Local DB
â”œâ”€â”€ migrations/ â€” Alembic migrations
â”œâ”€â”€ uploads/exports/ â€” Exported JSON
â””â”€â”€ tests/test_payroll_service.py

3. Features
âœ… Completed

Centralized calculations: payroll_service, ContractCalculations, PerformanceRecord.

RBAC stabilized: WEBDEV, SUPER_ADMIN, ADMIN, MANAGER.

Contract lifecycle: End conditions + conditional buttons.

Multi-agency support (Bangkok & Pattaya).

ðŸ”„ In Progress

Latency debugging on /payroll.

Decomposition of app.js monolith.

Stabilization sprint v0.9.82 (7 identified bugs).

ðŸš€ Planned

Automated testing pipeline (Pytest, coverage).

Full UI refactor with Tailwind + DaisyUI/Flowbite.

Continuous validation of SaaS roadmap (scalability, UX, security).

Possible infra migration (Heroku-only hosting vs PythonAnywhere hybrid).

4. Version History & Sprint Notes
v0.9.8 (Strategic Orchestration Release)

Added orchestration workflow (Gemini â†” IDE â†” Boss).

Defined 5 critical missions (Payroll latency, JS refactor, Tests, UI refactor, SaaS vision).

v0.9.82 (PrÃ©paration pour v0.9.9)

Objective: 100% local debugging before redeployment.

Bugs Fixed âœ…

#5 Contract PDF corruption (Git conflict markers).

#4 Performance Summary totals (batch aggregation fixed).

#3 Payroll Profit calculation (now correct).

Bugs Pending ðŸŽ¯

#6 Agency deletion button missing.

#7 Agency page translation (FR â†’ EN).

#1 CSS desync (Staff List page).

#2 Incomplete user list (Admin missing, paused).

5. Critical Missions
ðŸŽ¯ Mission 1 â€” Payroll Latency (Highest Priority)

Problem: N+1 query issue, slow page rendering.

Options: joinedload/subqueryload, pagination, indexing, caching, infra migration to Heroku.

Success: Page loads <1s with full dataset.

ðŸŽ¯ Mission 2 â€” app.js Refactor

Split into dispatch.js, payroll.js, staff.js, ui.js.

One module per sprint.

ðŸŽ¯ Mission 3 â€” Automated Testing

Unit tests (services, RBAC).

Integration tests (API endpoints).

SaaS-ready validation (multi-agency, permissions).

ðŸŽ¯ Mission 4 â€” UI Refactor

Tailwind migration.

Reusable components with DaisyUI/Flowbite.

Pages targeted: Login, Dispatch, Payroll.

ðŸŽ¯ Mission 5 â€” SaaS Roadmap

Scalability & performance.

Security hardening.

UX enhancements.

Investor-readiness for v1.0.

6. Deployment & DevOps
ðŸ”§ Environment Variables

.flaskenv, .env (Flask env, DATABASE_URL, secrets).

ðŸ“œ Deployment Guide

4 Phases:

Local prep â†’ freeze deps, reset migrations, clean SQLite, create fresh migration, test upgrade, push Git.

Heroku DB setup â†’ create app, add Postgres addon, reset, get DATABASE_URL.

PythonAnywhere deploy â†’ clone repo, venv, install deps, create .env, configure WSGI.

Finalization â†’ DB upgrade, create super admin, reload site.

âœ… WSGI Config (PythonAnywhere)
import os, sys
from dotenv import load_dotenv

path = '/home/Naskaus/recruitment-app'
if path not in sys.path:
    sys.path.insert(0, path)

load_dotenv(os.path.join(path, '.env'))

from app import create_app
application = create_app()

ðŸ“¦ Backup Script (Heroku â†’ PythonAnywhere)

Automates daily DB backup via heroku pg:backups.

Sends email with attachment (SMTP, Gmail app password).

Scheduled via PythonAnywhere Tasks.

ðŸ›  Troubleshooting (Top 10 issues)

psycopg2 build fail â†’ use psycopg2-binary.

DATABASE_URL mismatch â†’ ensure .env + python-dotenv load.

create_app missing â†’ check app/__init__.py.

Assets not served â†’ check static_folder.

Reload without venv â†’ ensure PA virtualenv configured.

â€¦ (full list in DevOps section).

7. Prompt Archive & Notes
ðŸš€ Strategic Orchestration Prompt (v0.9.8)

Defines roles: Gemini (Strategist), IDE (Implementer), Sebastien (Boss).

Mandates discovery phase, sequential planning, validation loop.

Output format: Markdown with mission, tasks, success criteria.

ðŸ“Œ Add-on Context (v0.9.82)

7 bugs listed with current statuses.

Ongoing mission: export + delete orchestration (Agency management).

ðŸ“œ Deployment Prompt

Role: Senior DevOps co-pilot.

Language: Explanations in French, commands in native language.

Guardrails: step-gating, secrets placeholders, verifications.

Deliverables: Full deployment phases, WSGI config, backup automation, troubleshooting guide.

âœ… Final Notes

This README is both a technical documentation and a prompt scaffold.

It contains everything needed for:

Gemini â†” IDE orchestration.

Developer onboarding.

Local debugging & deployment.

Long-term SaaS roadmap.
8. Communication Protocol (Gemini â†” IDE â†” Boss)

At the start of every new chat:
Gemini (Strategist) must query the IDE (Cursor/Windsurf) with basic discovery questions to build an accurate understanding of the app.
Example baseline questions:

Show me the full repo structure (files + sizes).

List dependencies and versions (requirements.txt, package.json).

What is the current database state (migrations, heads, schema)?

Show key configs (.env, config.py, WSGI).

Are there any open bugs, failing tests, or errors in logs?

Only once Gemini has collected everything needed from the IDE â†’ the task phase begins.

Gemini must always maximize IDE usage (read files, run inspections, request logs, test snippets) instead of relying on assumptions.

Sebastien (Boss) acts as intermediary, validating plans and priorities.